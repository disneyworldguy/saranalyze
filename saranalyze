#! /usr/bin/python
# saranalyze: For the analysis of sar files to help diagnose issues
# Written by: Kyle Walker kwalker@redhat.com

#Importing libraries and functionality
import sys
import os
#import pdb; pdb.set_trace()

#Setting constants


def sarLoad():
	#Open and read inputFile
	iSar = open(inputFile)

	counter = 0
	column = []
	headTemplate = ["CPU","proc/s","pswpin/s","pgpgin/s","tps","frmpg/s","kbmemfree","kbswpfree","kbhugfree","dentunusd","runq-sz","IFACE","call/s","scall/s","totsck"]
	stdDev = []
	Averages = []
	avgLoc = []
	Headers = []
	headLoc = []
	footLoc = []
	for line in iSar:
		line = line.strip()
		column = filter(None, line.split(" "))
		if len(column) > 1:
			if "Average" in column[0]:
				Averages.append(line.strip())
				avgLoc.append(counter)
			elif column[1] in headTemplate:
				Headers.append(line)
				headLoc.append(counter)
		else:
			footLoc.append(counter)	
		counter+=1

	counter2 = 0
	printLines = []
	iSar.seek(0)
	printLines = headLoc+avgLoc+footLoc
	printLines.sort()
#	print printLines
	for output in iSar:
		if counter2 in printLines:
			print output[:-1]
			counter2+=1	
		else:
			counter2+=1
	iSar.close()

#Check how we were invoked.
if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
	inputFile = sys.argv[1]
	print "Welcome to saranalyze! Parsing the information in "+inputFile
	sarLoad()
else:
	exit

