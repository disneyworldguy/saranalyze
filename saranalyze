#! /usr/bin/python
# saranalyze: For the analysis of sar files to help diagnose issues
# Written by: Kyle Walker kwalker@redhat.com

#Importing libraries and functionality
import sys, os, numpy, pdb

#Setting global lists that will be accessible between the functions below
column = []
linuxVer = ""
headTemplate = ["CPU","proc/s","pswpin/s","pgpgin/s","tps","frmpg/s","kbmemfree","kbswpfree","kbhugfree","dentunusd","runq-sz","rxpck/s", "rxerr/s","call/s","scall/s","totsck"]
dataSet = []
stdDev = []
Averages = []
avgLoc = []
Headers = []
headLoc = []
footLoc = []
restarts = [0]
printLines = []

#Responsible for initially opening the sar file passed and parsing contents
def sarLoad():
	global iSar, inputFile, printLines, restarts, column, dataSet, Headers, headLoc, avgLoc
	iSar = open(inputFile)
	
	counter = 0
	for line in iSar:
		column = filter(None, line.split(" "))
		if len(column) > 1:
			column[-1] = column[-1].strip()
			column.insert(0, counter)
			if "Average" in column[1]:
				Averages.append(filter(None, line.split(" ")))
				Averages[-1][-1] = Averages[-1][-1].strip()
				avgLoc.append(counter)
			elif column[2] in headTemplate or column[3] in headTemplate:
				Headers.append(line)
				headLoc.append(counter)
			elif "Linux" in column[1]:
				linuxVer = column[2]
			elif "RESTART" in column[3]:
				restarts.append(counter)
			dataSet.append(column)
		else:
			footLoc.append(counter)	
		counter+=1

	restarts.append(counter)

	iSar.close()
	printLines = headLoc+avgLoc+footLoc

#Works through the provided data looking for datapoints that should be printed
def sarAnalyze():
	global printLines, dataSet, headLoc, footLoc

	cpuArray = []; tempArray = []
	for CPU in range(headLoc[0],avgLoc[0]-1):
		cpuArray.append(map(float, dataSet[CPU][3:]))
		
	stdDev.append(numpy.std(cpuArray,axis=0))

#	for x in range(0,len(stdDev)):
#		print (float(Averages[0][(x+2)])+stdDev[x]*2) 
#		print
#		print (float(Averages[0][(x+2)])-stdDev[x]*2) 
#		print
#		print dataSet[2][(x+3)]
#		print
#		if  float(Averages[0][(x+2)])+stdDev[x]*2 <= float(dataSet[2][x+3]): 
#			print "TRUE GT"
#		elif float(Averages[0][(x+2)])-stdDev[x]*2 >= dataSet[2][x+3] :
#			print "TRUE LT"
#		else:
#			print "FALSE"

	for CPU in range(headLoc[0],avgLoc[0]-1):
		for columnTemp in range(3, len(dataSet[0])):
			if float(dataSet[CPU][columnTemp]) > round((float(Averages[0][(columnTemp-1)])+(stdDev[0][(columnTemp-3)]*2)),2) or float(dataSet[CPU][columnTemp]) < round((float(Averages[0][(columnTemp-1)])-(stdDev[0][(columnTemp-3)]*2)),2):
#				pdb.set_trace()
				printLines.append(dataSet[CPU][0])

#Prints the lines in the passed file that are deemed interesting
def sarPrint(selRestart):
	counter2 = 0
	selRestart = (int(selRestart))
	printLines.sort()
	global iSar, inputFile
	iSar = open(inputFile)
	
	for output in iSar:
		if counter2 in printLines:
			if len(restarts) > 0:
				if counter2 < restarts[selRestart] and counter2 > restarts[selRestart-1]:
					print output[:-1]
					counter2+=1	
				else:
					counter2+=1
			else:
				print output[:-1]
				counter2+=1
		else:
			counter2+=1
	iSar.close()

#Check how we were invoked.
if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
	inputFile = sys.argv[1]
	os.system("clear")
	print "Welcome to saranalyze! Parsing the information in "+inputFile
	sarLoad()
	sarAnalyze()
	if len(restarts) > 0:
		print "\nThere are %d restart(s) in the source sar file.\n"  % (len(restarts)-2)
		selRestart = raw_input("Which data section would you like analyzed for output [1-9]: ")
	sarPrint(selRestart)
else:
	exit

